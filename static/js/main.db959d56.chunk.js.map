{"version":3,"sources":["Components/Button.js","Components/Screen.js","Components/buttonData.js","Components/calculate.js","Components/handleDisplay.js","Components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","styles","gridArea","position","style","id","keypad","type","onClick","e","handleClick","tag","Screen","calculation","value","display","onChange","handleChange","buttonData","pid","calculate","str","calcArr","match","i","length","splice","parseFloat","result","Math","round","Number","EPSILON","handleDisplay","input","output","displayType","test","isCalcLastNumber","isNewCalc","replace","includes","slice","Calculator","useState","setOutput","currentTarget","getAttribute","map","item","key","filter","useEffect","window","addEventListener","removeEventListener","buttonComponents","button","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db959d56.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// handles all buttons on the calculator\r\nfunction Button(props) {\r\n\r\n    const styles = {gridArea: props.position}\r\n\r\n    return (\r\n        <div style={styles}>\r\n            <button\r\n                id={props.id}\r\n                style={styles}\r\n                keypad={props.keypad}\r\n                type={props.type}\r\n                onClick={(e) => props.handleClick(e)}>\r\n                {props.tag}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\n\r\n// controls the display: main display \"display\" and concurrent \"calculation\" display\r\nfunction Screen(props) {\r\n\r\n    const styles = {gridArea: \"a\"}\r\n\r\n    return (\r\n        <div id=\"Screen\" style={styles}>\r\n            <p\r\n                id=\"calculation\">\r\n                {props.calculation}\r\n            </p>\r\n            <input\r\n                id=\"display\"\r\n                type=\"text\"\r\n                value={props.display}\r\n                onChange={props.handleChange}\r\n                >\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Screen\r\n","const buttonData = [\r\n  //   pid: individual numerical identifier\r\n  //   id: id for use in  button id\r\n  //   keypad: to compare with e.key value\r\n  //   tag: label used on calculator UI\r\n  //   type: number or operator\r\n  //   position: for psositioning button in display: grid\r\n  {\r\n    pid: 1,\r\n    id: \"clear\",\r\n    keypad: \"c\",\r\n    tag: \"C\",\r\n    type: \"operator\",\r\n    position: \"b\"\r\n  },\r\n  {\r\n    pid: 2,\r\n    id: \"divide\",\r\n    keypad: \"/\",\r\n    tag: \"/\",\r\n    type: \"operator\",\r\n    position: \"c\"\r\n  },\r\n  {\r\n    pid: 3,\r\n    id: \"multiply\",\r\n    keypad: \"*\",\r\n    tag: \"*\",\r\n    type: \"operator\",\r\n    position: \"d\"\r\n  },\r\n  {\r\n    pid: 4,\r\n    id: \"subtract\",\r\n    keypad: \"-\",\r\n    tag: \"-\",\r\n    type: \"operator\",\r\n    position: \"e\"\r\n  },\r\n  {\r\n    pid: 5,\r\n    id: \"seven\",\r\n    keypad: \"7\",\r\n    tag: \"7\",\r\n    type: \"number\",\r\n    position: \"f\"\r\n  },\r\n  {\r\n    pid: 6,\r\n    id: \"eight\",\r\n    keypad: \"8\",\r\n    tag: \"8\",\r\n    type: \"number\",\r\n    position: \"g\"\r\n  },\r\n  {\r\n    pid: 7,\r\n    id: \"nine\",\r\n    keypad: \"9\",\r\n    tag: \"9\",\r\n    type: \"number\",\r\n    position: \"h\"\r\n  },\r\n  {\r\n    pid: 8,\r\n    id: \"add\",\r\n    keypad: \"+\",\r\n    tag: \"+\",\r\n    type: \"operator\",\r\n    position: \"i\"\r\n  },\r\n  {\r\n    pid: 9,\r\n    id: \"four\",\r\n    keypad: \"4\",\r\n    tag: \"4\",\r\n    type: \"number\",\r\n    position: \"j\"\r\n  },\r\n  {\r\n    pid: 10,\r\n    id: \"five\",\r\n    keypad: \"5\",\r\n    tag: \"5\",\r\n    type: \"number\",\r\n    position: \"k\"\r\n  },\r\n  {\r\n    pid: 11,\r\n    id: \"six\",\r\n    keypad: \"6\",\r\n    tag: \"6\",\r\n    type: \"number\",\r\n    position: \"l\"\r\n  },\r\n  {\r\n    pid: 12,\r\n    id: \"one\",\r\n    keypad: \"1\",\r\n    tag: \"1\",\r\n    type: \"number\",\r\n    position: \"m\"\r\n  },\r\n  {\r\n    pid: 13,\r\n    id: \"two\",\r\n    keypad: \"2\",\r\n    tag: \"2\",\r\n    type: \"number\",\r\n    position: \"n\"\r\n  },\r\n  {\r\n    pid: 14,\r\n    id: \"three\",\r\n    keypad: \"3\",\r\n    tag: \"3\",\r\n    type: \"number\",\r\n    position: \"o\"\r\n  },\r\n  {\r\n    pid: 15,\r\n    id: \"equals\",\r\n    keypad: \"Enter\",\r\n    tag: \"=\",\r\n    type: \"operator\",\r\n    position: \"p\"\r\n  },\r\n  {\r\n    pid: 16,\r\n    id: \"zero\",\r\n    keypad: \"0\",\r\n    tag: \"0\",\r\n    type: \"number\",\r\n    position: \"q\"\r\n  },\r\n  {\r\n    pid: 17,\r\n    id: \"decimal\",\r\n    keypad: \".\",\r\n    tag: \".\",\r\n    type: \"number\",\r\n    position: \"r\"\r\n  }\r\n]\r\n\r\nexport default buttonData\r\n","// script for calculating the final result\r\n// calculate follows formula logic\r\nfunction calculate(str) {\r\n\r\n    // array of all numbers and operators from calculation\r\n    let calcArr = str.match(/[0-9,/,*,\\-,+,.]+(?=\\s)/g)\r\n\r\n    // find and perform all multiplication\r\n    for (let i=0; i<=calcArr.length; i++) {\r\n        if(calcArr[i] === \"*\") {\r\n            calcArr.splice(i-1, 3, (parseFloat(calcArr[i-1]) * parseFloat(calcArr[i+1])))\r\n            i=-1\r\n        }\r\n    }\r\n\r\n    // find and perform all division\r\n    for (let i=0; i<=calcArr.length; i++) {\r\n        if(calcArr[i] === \"/\") {\r\n            calcArr.splice(i-1, 3, (parseFloat(calcArr[i-1]) / parseFloat(calcArr[i+1])))\r\n            i=-1\r\n        }\r\n    }\r\n\r\n    // find and perform all addition and subtraction\r\n    for (let i=0; i<=calcArr.length; i++) {\r\n        if (calcArr[i] === \"+\") {\r\n            calcArr.splice(i-1, 3, (parseFloat(calcArr[i-1]) + parseFloat(calcArr[i+1])))\r\n            i=-1\r\n        } else if (calcArr[i] === \"-\") {\r\n            calcArr.splice(i-1, 3, (parseFloat(calcArr[i-1]) - parseFloat(calcArr[i+1])))\r\n            i=-1\r\n        }\r\n    }\r\n\r\n    // if calculation is a single number, number will not have passed through above loops and will still be a string\r\n    let result = parseFloat(calcArr[0])\r\n\r\n    //below function used to round while omitting rounding errors\r\n    return Math.round((result + Number.EPSILON) * 1000000000) / 1000000000\r\n}\r\n\r\nexport default calculate\r\n","// import buttonData from './buttonData'\r\nimport calculate from './calculate'\r\n\r\n// function receives currrent input and output (display and calculation) and returns updated output\r\nfunction handleDisplay(input, output) {\r\n\r\n    let display = output.display\r\n    let calculation = output.calculation\r\n    let displayType = (/(\\d+|\\.)$/).test(display) ? \"number\" : \"operator\"\r\n    let isCalcLastNumber = (/\\d$/).test(calculation)          // is final part of calculation a number?\r\n    let isNewCalc = (/=$/).test(calculation)                  // has a new total just been calculated?\r\n\r\n    // Following is the logic for controlling output (calculation and display) based on input\r\n\r\n    if (input.value === \"c\") {                                  // Case for clear button \"C\"\r\n        calculation = \"\"\r\n        display = \"0\"\r\n\r\n    } else if (calculation.length >= 90) {                      // set max length for calculation\r\n        return {\r\n            display: display,\r\n            calculation: calculation\r\n        }\r\n\r\n    } else if (input.value === \"Enter\") {                       // Case for calculate \"=\"\r\n        if (!isNewCalc) {                                       // Key only has effect if total has not just been calculated\r\n            if(displayType ===  \"number\") {\r\n                calculation = calculation + \" \" + display + \" =\"\r\n            } else if (!isCalcLastNumber){                      // If final part of calculation is not a number (an operator), replace with \"=\"\r\n                calculation = calculation.replace(/[/,*,-,+]$/g , \"=\")\r\n            } else {\r\n                calculation = calculation + \" =\"\r\n            }\r\n            display = calculate(calculation)\r\n        }\r\n\r\n    } else if((displayType ===  \"number\") && (input.type === \"number\")) {\r\n        if (isNewCalc) {                                        // If total has been just calculated, clear display and calculation\r\n            calculation = \"\"\r\n            display =\"0\"\r\n        } else if (display.length < 9) {                           // add additional digits only if display is less than 9 digits\r\n            switch(input.value) {\r\n                case \"0\":\r\n                    display === \"0\" ? display = \"0\"\r\n                    : display === \"-0\" ? display = \"-0\"             // to prevent more than one zero at beginning\r\n                    : display = display + input.value\r\n                    break;\r\n                case \"1\":\r\n                case \"2\":\r\n                case \"3\":\r\n                case \"4\":\r\n                case \"5\":\r\n                case \"6\":\r\n                case \"7\":\r\n                case \"8\":\r\n                case \"9\":\r\n                    display === \"0\" ? display = input.value\r\n                    : display = display + input.value\r\n                    break;\r\n                case \".\":\r\n                    if (!display.includes(\".\")) {\r\n                        display = display + \".\"\r\n                    }                                               // to prevent more than one decimal\r\n                    break;\r\n                default:                                            // default not required, included as per recommendation\r\n                }\r\n        }\r\n\r\n        } else if ((displayType ===  \"number\") && (input.type === \"operator\")) {\r\n            if (isNewCalc) {\r\n                calculation = display                           // if new total has just been calculated,\r\n                display =input.value                            // prepare to perform new operation on total\r\n            } else {\r\n                calculation = calculation + \" \" + display\r\n                display = input.value\r\n            }\r\n\r\n        } else if ((displayType ===  \"operator\") && (input.type === \"number\")) {\r\n            if (display === \"-\") {\r\n                if (isCalcLastNumber) {                             // if calculation ends in number, minus is moved to calculation\r\n                    calculation = calculation + \" \" + display\r\n                    display = input.value\r\n                } else if (input.value === \".\") {                   // input preceding \"0\" for negative decimal numbers\r\n                    display = \"-0.\"\r\n                } else {\r\n                    display = display + input.value}                // else (calculation ends in operation) minus is kept in display to create negative number\r\n            } else {\r\n                calculation = calculation + \" \" + display           // for other operators, display operator is moved to calculation\r\n                if (input.value === \".\") {\r\n                    display = \"0.\"\r\n                } else {\r\n                    display = input.value\r\n                }\r\n            }\r\n\r\n        } else if ((displayType ===  \"operator\") && (input.type === \"operator\")) {\r\n            if ((input.value === \"-\") && (isCalcLastNumber)) {        // if input is minus, display is already an operator and calculation ends in number...\r\n                calculation = calculation + \" \" + display             // displayed operator is moved to calculation ...\r\n                display = input.value                                 // to allow for display to use negative number ...\r\n            } else if ((!isCalcLastNumber) && (display === \"-\")) {    // however, if the above operation has been performed and a new operator is input ...\r\n                calculation = calculation.slice(0,-1)                 // the final operation in calculation is overidden (deleted) so that only the final input operator (excluding minus) is used\r\n                display = input.value\r\n            } else if (isCalcLastNumber) {                            // if calculation ends in a number display operator is overidden\r\n                display = input.value\r\n            }\r\n        }                                                             // (implied) else (calculation ends in operator) new input operator is ignored\r\n\r\n    return {\r\n        display: display,\r\n        calculation: calculation\r\n    }\r\n\r\n}\r\n\r\nexport default handleDisplay\r\n","import React, {useState, useEffect} from 'react'\r\nimport Button from './Button'\r\nimport Screen from './Screen'\r\nimport buttonData from './buttonData'\r\nimport handleDisplay from './handleDisplay'\r\n\r\n// top level component for handling the calculator, including state for combined display: \"display\" and \"calculation\"\r\nfunction Calculator() {\r\n\r\n    const [output, setOutput] = useState({display: \"0\", calculation: \"\"})\r\n\r\n    let input = {value: \"\", type: \"\"}\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleChange)\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleChange)\r\n        }\r\n    })\r\n\r\n// handle click for button clicks\r\n    function handleClick(e) {\r\n        input = {\r\n            value: e.currentTarget.getAttribute(\"keypad\"),\r\n            type: e.currentTarget.getAttribute(\"type\")\r\n            }\r\n        setOutput(output => (handleDisplay(input, output)))\r\n      }\r\n\r\n// handle change for keyboard entries\r\n    function handleChange(e) {\r\n        if (buttonData.map(item => item.keypad).includes(e.key)) {\r\n          input = {\r\n                value: e.key,\r\n                type: buttonData.filter(item => item.keypad === e.key)[0].type\r\n                }\r\n          setOutput(output => (handleDisplay(input, output)))\r\n        }\r\n    }\r\n\r\n    const buttonComponents = buttonData.map(button =>\r\n        <Button\r\n            key={button.pid}\r\n            id={button.id}\r\n            keypad={button.keypad}\r\n            tag={button.tag}\r\n            type={button.type}\r\n            position={button.position}\r\n            handleClick={handleClick}/>\r\n    )\r\n\r\n    return (\r\n        <div id=\"Calculator\">\r\n            <Screen\r\n                display={output.display}\r\n                calculation={output.calculation}\r\n                handleChange={handleChange}/>\r\n            {buttonComponents}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Calculator\r\n","import './App.css';\nimport Calculator from './Components/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Calculatamatronix</h1>\n      </header>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}